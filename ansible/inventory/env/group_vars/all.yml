###################### LP ############################


# duplicate variable as env
cloud_storage_config_environment: "{{env}}"
ansible_vault_password: "{{lp_vault_ansible_vault_password}}"
secrets_path: '{{inventory_dir}}/group_vars/common.yml'

env_name: "{{ env }}"
instance_name: "{{ env }}"
instance: "{{ env }}"
cert_env_prefix : "{{ instance }}"

learner_user: learning
learner_group: learning
learner_user_home: "/home/{{ learner_user }}"

## Common variables for LP
# these  variables can be defined as {{instance}}_*
content_keyspace_name: "{{instance}}_content_store"
hierarchy_keyspace_name: "{{instance}}_hierarchy_store"
dialcode_keyspace_name: "{{instance}}_dialcode_store"
category_keyspace_name: "{{instance}}_category_store"
assessment_keyspace_name: "{{instance}}_question_store"
question_keyspace_name: "{{instance}}_question_store"
platform_keyspace_name: "{{instance}}_platform_db"
uci_keyspace_name: "{{instance}}_uci_store"


dp_cassandra_connection: "{{ groups['dp-cassandra'][0] }}:9042"
core_cassandra_connection: "{{groups['core-cassandra']|join(':9042,')}}:9042"
core_cassandra_connection_ip: "{{ groups['core-cassandra'][0] }}"

dial_service_generate_url: "http://{{private_ingressgateway_ip}}/dial/dialcode/v3/generate"
search_service_endpoint: "{{ekstep_domain_name}}/api/search/v2/search"


## learning service variables
plugin_media_base_url: "{{proto}}://{{domain_name}}"  # Plugin should be doanloaded from sunbird. Commenting the ekstep url : "{{ekstep_domain_name}}"
content_media_base_url: "{{proto}}://{{domain_name}}"      # content_media_base_url
dial_service_search_url: "http://{{private_ingressgateway_ip}}/dial/dialcode/v3/search"   # dial_service_search_url
resourcemanager: "{{ groups['yarn-master'][0] }}"
yarn_slaves: "{{ groups['yarn-slave']}}"
__yarn_host__: "{{ groups['yarn-master'][0] }}"

neo4j_dir: neo4j-learning

lp_bolt_url: bolt://{{ groups['learning-neo4j-cluster'][0] }}:7687
lp_bolt_read_url: bolt://{{ groups['learning-neo4j-cluster'][0] }}:7687
lp_bolt_write_url: bolt://{{ groups['learning-neo4j-cluster'][0] }}:7687
lp_url: http://{{ groups['learningall'][0] }}:8080/learning-service
lp_tmpfile_location: /tmp
other_bolt_url: bolt://{{ groups['learning-neo4j-cluster'][0] }}:8687
other_bolt_read_url: bolt://{{ groups['learning-neo4j-cluster'][0] }}:8687
other_bolt_write_url: bolt://{{ groups['learning-neo4j-cluster'][0] }}:8687


lp_cassandra_connection: "{{groups['cassandra']|join(':9042,')}}:9042"
cassandra_host: "{{ groups['cassandra'][0] }}"
redis_host: "{{ groups['redis1'][0] }}"
dp_redis_host: "{{ groups['dp-redis'][0] }}"
kafka_brokers: "{{groups['processing-cluster-kafka']|join(':9092,')}}:9092"
zookeepers: "{{groups['processing-cluster-zookeepers']|join(':2181,')}}:2181"
audit_es_host: "{{ groups['composite-search-cluster']|join(':9200,')}}:9200"
search_es_host: "{{ groups['composite-search-cluster']|join(':9200,')}}:9200"
search_lms_es_host: "{{ groups['core-es']|join(':9200,')}}:9200"

graph_passport_key: "{{ lp_vault_graph_passport_key }}"
youtube_api_key: "{{ lp_vault_youtube_api_key }}"

## es backup
es_snapshot_host: "{{ groups['composite-search-cluster'][0] }}"
snapshot_base_path: compositesearch


#Learning-Service baseURL
kp_learning_service_base_url: "http://{{ groups['learning1'][0] }}:8080/learning-service"
sunbird_platform_installation: "{{ sunbird_installation }}"


# DIAL Image Container Name
dial_image_storage_container: "dial"

search_es7_host: "{{ groups['es7']|join(':9200,')}}:9200"

mlworkbench: "{{ groups['mlworkbench'][0]}}"

cloud_account: "{{ cloud_public_storage_accountname }}"
cloud_secret: "{{ cloud_public_storage_secret }}"
dedup_redis_host: "{{ dp_redis_host }}"
kp_redis_host: "{{ groups['redisall'][0] }}"
neo4j_route_path: "bolt://{{ groups['learning-neo4j-node1'][0] }}:7687"

### Global vars
flink_namespace: "flink-kp-{{ instance }}"
middleware_hierarchy_keyspace: "{{ instance }}_hierarchy_store"
kp_print_service_base_url: "http://{{private_ingressgateway_ip}}/print"
cert_reg_service_base_url: "http://{{private_ingressgateway_ip}}/certreg"
kp_search_service_base_url: "http://{{private_ingressgateway_ip}}/search"
lms_service_base_url: "http://{{private_ingressgateway_ip}}/lms"
learner_service_base_url: "http://{{private_ingressgateway_ip}}/userorg"
sourcing_content_service_base_url: "http://{{dock_private_ingressgateway_ip | default('localhost') }}/content"
content_service_base_url: "http://{{private_ingressgateway_ip}}/content"
kp_content_service_base_url: "http://{{private_ingressgateway_ip}}/content"
cert_service_base_url: "http://{{private_ingressgateway_ip}}/cert"
enc_service_base_url: "http://{{private_ingressgateway_ip}}/enc"
cert_rc_base_url: "http://{{private_ingressgateway_ip}}/registry-service/api/v1"
cert_rc_entity: "TrainingCertificate"
certificate_base_path: "https://{{domain_name}}/certs"
cert_domain_url:  "{{proto}}://{{domain_name}}"
cert_container_name: "{{ cloud_storage_certservice_bucketname }}"
cert_cloud_storage_type: "{{cloud_service_provider}}"
cert_cloud_storage_secret: "{{cloud_private_storage_secret}}"
cert_cloud_storage_key: "{{cloud_private_storage_accountname}}"
cert_cloud_storage_endpoint: "{{cloud_private_storage_endpoint | default('')}}"
cloud_storage_base_url: "{{cloud_storage_base_url}}"
content_read_api_host: "{{content_read_api_host}}"
content_read_api_endpoint: "{{content_read_api_endpoint}}"
content_cloud_storage_container: "{{cloud_storage_content_bucketname}}"
cloud_store_base_path_placeholder: "CLOUD_BASE_PATH"

default_channel: "org.sunbird"
download_neo4j: true
neo4j_upstream_download: false
enable_suppress_exception: false
enable_rc_certificate: true
certificate_migrator_enable_suppress_exception: false

### kafka and zookeeper ip vars and being used in kafka topiccreation role.
processing_zookeeper_ip: "{{ groups['processing-cluster-zookeepers'][0] }}"
## MultiDC flag for LERN data pipeline jobs
cassandra_isMultiDCEnabled: "{{is_multidc_enabled}}"

# LERN BB specific kafka topics,have to be overridden in private devops repo to include BB Name for integrators.
kafka_topic_course_batch_job_request: "{{env_name}}.coursebatch.job.request"
kafka_topic_certificate_request: "{{env_name}}.issue.certificate.request"
kafka_topic_contentstate_invalid: "{{env_name}}.contentstate.invalid"
kafka_topic_enrolment_sync_request: "{{env_name}}.batch.enrolment.sync.request"
kafka_topic_assessment: "{{env_name}}.telemetry.assess"
kafka_topic_telemetry_raw:  "{{env_name}}.telemetry.raw"
kafka_topic_activity_agg_failed: "{{env_name}}.activity.agg.failed"
kafka_topic_content_publish_request: "{{env_name}}.content.postpublish.request"
kafka_topic_generate_certificate_request: "{{env_name}}.generate.certificate.request"
kafka_topic_certificate_failed: "{{env_name}}.issue.certificate.failed"
kafka_topic_lms_user_account: "{{env_name}}.lms.user.account.merge"
kafka_topic_learning_failed: "{{env_name}}.learning.events.failed"
kafka_topic_assessment_failed: "{{env_name}}.telemetry.assess.failed"
kafka_topic_lms_notification: "{{env_name}}.lms.notification"
kafka_topic_enrolment_reconciliation_failed: "{{env_name}}.enrolment.reconciliation.failed"
kafka_topic_generate_certificate_failed: "{{env_name}}.generate.certificate.failed"
kafka_topic_migrate_certificate_request: "{{env_name}}.legacy.certificate.migrate"
kafka_topic_programuser_info: "{{env_name}}.programuser.info"

## LERN BB specific kafka groups,have to be overridden in private devops repo to include BB Name for integrators.
kafka_group_activity_agg: "{{env_name}}-activity-aggregate-group"
kafka_group_relation_cache_updater: "{{env_name}}-relation-cache-updater-group"
kafka_group_enrolment_reconciliation: "{{env_name}}-enrolment-reconciliation-group"
kafka_group_collection_pre_processor: "{{env_name}}-collection-cert-pre-processor-group"
kafka_group_certificate_generator: "{{env_name}}-certificate-generator-group"
kafka_group_certificate_migrator: "{{env_name}}-certificate-migrator-group"
kafka_group_merge_courses: "{{env_name}}-merge-courses-group"
kafka_group_assessment_aggregator: "{{env_name}}-assessment-aggregator-group"
kafka_group_lms_notification: "{{env_name}}-lms-notification"
kafka_group_programuser_info: "{{env_name}}-programuser-group"

## Checkpoint Config
checkpoint_store_type: "{{cloud_service_provider}}"
cloud_storage_key: "{{ cloud_public_storage_accountname }}"
cloud_storage_secret: "{{ cloud_public_storage_secret }}"
cloud_storage_endpoint: ""
cloud_storage_path_style_access: ""
cloud_storage_project_id: ""
cloud_storage_flink_bucketname: "flink-check-points-store"

#(user read api details)
user_read_api_endpoint: "/learner/private/user/v1/read/"

sunbird_api_auth_token: "{{ core_vault_sunbird_api_auth_token }}"
